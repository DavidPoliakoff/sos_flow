
        == COMPATIBILITY ==

SOSflow has the following requirements:
    - C99
    - POSIX Threads
    - MPI
    - SQLite 3
    - CMake 2.8+

The SOSflow runtime environment is built and tested on
Apple OSX and various modern Linux systems.

        == DOWNLOADING ==

Open a Terminal and issue the following command to pull down
the latest copy of SOSflow into a new folder named "sos_flow":

    git clone https://github.com/cdwdirect/sos_flow.git

The folder that is created and contains the cloned repository
will be referred to as [SOSROOT] for the remainder of this
document. Use the relative or fully-qualified path to this
folder wherever you see [SOSROOT] in the text or example
commands below.

The "master" repository branch is the default and contains the
latest stable source code.

        == CONFIGURATION ==

See the [SOSROOT]/CMakeLists.txt file's OPTION settings for
various ways to build SOSflow.  The default settings should
be set up to use MPI as a the means of communicating between
instances of the SOSflow runtime environment daemons, but
there are other options available such as EVPath.

Make sure to adjust these settings prior to running the
configuration scripts when building SOSflow.

        == ENVIRONMENT ==

Configurations for various target environments are included
in the [SOSROOT]/hosts folder. SOSflow provides scripts to
help with configurtion, build, and running examples. These
scripts use relative pathing based on environment variables.

To set up the environment for a traditional Linux operating
system like Ubuntu or RHEL, run the following command:

    source [SOSROOT]/hosts/linux/setenv.sh

You can see what environment parameters were established
by typing this into your terminal:

    env | grep SOS

You should see an environment variable named $SOS_ROOT that
has the full path that we are using here as [SOSROOT]. Now
you should be ready to build and run SOSflow.

        == BUILDING ==

A configuration script is provided to create a build folder
and drive CMake's Makefile generation process. To run the
configuration script for a generic Linux environmet, type the
following command into your Terminal:

    [SOSROOT]/scripts/configure.sh -c linux

The -c option will instruct the script to clean up any
existing build folder for that target.  Running the script
with the "linux" option will create a folder named
"build-linux" inside the [SOSROOT] folder. Go into this
folder and type "make":

    cd [SOSROOT]/build-linux
    make

This should complete successfully if there are no missing
required libraries. Get in touch with the SOSflow AUTHORS
if you have any issues at this step.

        == TESTING ==

To start up a single-node test configuration of the SOSflow
runtime environment, enter the following command at your
Terminal:

    cd [SOSROOT]/build-linux
    ../scripts/mpi.start.2 &

The ampersand will cause the daemons to launch but to run
as background processes. After a few seconds you can press
your Return (ENTER) key several times and see the command
prompt ready for new commands.

The working directory for SOSflow will be the same place
where you built and launched the daemons. You should see
several new files in that folder, such as:

    sosd.00000.db
    sosd.00000.lock
    sosd.00000.key
    . . .

To run the demonstration / test application for a generic
Linux environment, enter the following command at your
terminal:

    cd [SOSROOT]/build-linux
    ./bin/demo_app -i 100 -m 2000000 -p 200 -d 100000

This will execute the demonstration / stress-test app that
comes bundled with SOSflow.  It will create a publication
handle with 200 elements, it will publish new values into
all 200 of them 100 times between each time it publishes
them up to the in situ daemon, and it will ensure a delay
of at least 1/10th of a second between attempts to connect
and publish the values to the SOSflow runtime daemon.

The demo_app application is itself an MPI application that
can be launched multiple times in situ to test out the
throughput and latency of information moving through the
system, as well as the total capacity of the daemon to
handle various workloads.

        == EXAMPLE CODE ==

The following source code provides an example of using
the SOSflow API to submit information to the runtime
environment:
















